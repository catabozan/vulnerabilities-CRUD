<?php

use App\Models\User;
use App\Models\Vulnerability;
use Illuminate\Auth\Access\AuthorizationException;
use Illuminate\Auth\AuthenticationException;
use Illuminate\Validation\ValidationException;
use function Pest\Laravel\actingAs;
use function Pest\Laravel\patch;
use function PHPUnit\Framework\assertEquals;
use function PHPUnit\Framework\assertNotEquals;

it('can update a vulnerability', function () {
    /** @var User */
    $bob = User::factory()->create();
    actingAs($bob);

    Vulnerability::factory()
        ->count(3)
        ->create(['user_id' => $bob->getKey()]);

    $vulnerabilityToUpdate = Vulnerability::all()->random();

    patch(
        route('vulnerability.update', ['vulnerability' => $vulnerabilityToUpdate->getKey()]),
        ['title' => 'New Awesome Up To Date Title']
    );

    assertEquals('New Awesome Up To Date Title', $vulnerabilityToUpdate->fresh()->title);
    assertNotEquals($vulnerabilityToUpdate->title, $vulnerabilityToUpdate->fresh()->title);
    assertEquals($vulnerabilityToUpdate->description, $vulnerabilityToUpdate->fresh()->description);
    assertEquals($vulnerabilityToUpdate->threat_level, $vulnerabilityToUpdate->fresh()->threat_level);
});

it('validated the request', function () {
    /** @var User */
    $bob = User::factory()->create();
    actingAs($bob);

    Vulnerability::factory()
        ->count(3)
        ->create(['user_id' => $bob->getKey()]);

    $vulnerabilityToUpdate = Vulnerability::all()->random();

    patch(
        route('vulnerability.update', ['vulnerability' => $vulnerabilityToUpdate->getKey()]),
        ['threat_level' => 'not a number']
    );
})->expectException(ValidationException::class);

it("cannot update another user's vulnerability", function () {
    /** @var User */
    $bob = User::factory()->create();

    Vulnerability::factory()
        ->count(3)
        ->create(['user_id' => $bob->getKey()]);

    /** @var User */
    $ted = User::factory()->create();
    actingAs($ted);

    $vulnerabilityToUpdate = Vulnerability::all()->random();

    patch(
        route('vulnerability.update', ['vulnerability' => $vulnerabilityToUpdate->getKey()]),
        ['title' => 'New Title']
    );
})->expectException(AuthorizationException::class);

test('you must be authenticated to update a vulnerability', function () {
    /** @var User */
    $bob = User::factory()->create();

    Vulnerability::factory()
        ->count(3)
        ->create(['user_id' => $bob->getKey()]);

    $vulnerabilityToUpdate = Vulnerability::all()->random();

    patch(
        route('vulnerability.update', ['vulnerability' => $vulnerabilityToUpdate->getKey()]),
        ['title' => 'New Title']
    );
})->expectException(AuthenticationException::class);
