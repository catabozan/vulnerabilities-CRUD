<?php

use App\Models\User;
use App\Models\Vulnerability;
use Illuminate\Auth\Access\AuthorizationException;
use Illuminate\Auth\AuthenticationException;
use function Pest\Laravel\actingAs;
use function Pest\Laravel\delete;
use function PHPUnit\Framework\assertEmpty;

it('can delete a vulnerability', function () {
    /** @var User */
    $bob = User::factory()->create();
    actingAs($bob);

    Vulnerability::factory()
        ->count(3)
        ->create(['user_id' => $bob->getKey()]);

    $vulnerabilityToDelete = Vulnerability::all()->random();

    delete(route(
        'vulnerability.destroy',
        ['vulnerability' => $vulnerabilityToDelete->getKey()]
    ));

    assertEmpty(Vulnerability::find($vulnerabilityToDelete->getKey()));
});

it("cannot delete another user's vulnerability", function () {
    /** @var User */
    $bob = User::factory()->create();

    Vulnerability::factory()
        ->count(3)
        ->create(['user_id' => $bob->getKey()]);

    /** @var User */
    $ted = User::factory()->create();
    actingAs($ted);

    $vulnerabilityToDelete = Vulnerability::all()->random();

    delete(route(
        'vulnerability.destroy',
        ['vulnerability' => $vulnerabilityToDelete->getKey()]
    ));
})->expectException(AuthorizationException::class);

test('you must be authenticated to delete a vulnerability', function () {
    /** @var User */
    $bob = User::factory()->create();

    Vulnerability::factory()
        ->count(3)
        ->create(['user_id' => $bob->getKey()]);

    $vulnerabilityToDelete = Vulnerability::all()->random();

    delete(route(
        'vulnerability.destroy',
        ['vulnerability' => $vulnerabilityToDelete->getKey()]
    ));
})->expectException(AuthenticationException::class);
